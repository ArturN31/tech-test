@page "/Logs"

@using UserManagement.Blazor.Models
@using UserManagement.Blazor.Providers
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject AuthenticationService Auth

<PageTitle>Logs</PageTitle>

<h2>Logs List</h2>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>UserId</th>
                <th>Performed Action</th>
                <th>TimeStamp</th>
                <th style="width: 1px;"></th>
            </tr>
        </thead>
        <tbody>
            @if (paginatedLogs != null && paginatedLogs.Logs != null && paginatedLogs.Logs.Any())
            {
                @foreach (var log in paginatedLogs.Logs)
                {
                    <tr>
                        <td>
                            @log.Id
                        </td>
                        <td>
                            @log.UserId
                        </td>
                        <td>
                            @log.PerformedAction
                        </td>
                        <td>
                            @log.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")
                        </td>
                        <td>
                            <NavLink href="@($"/logs/{log.Id}")" class="btn">View</NavLink>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">
                        @if (paginatedLogs == null)
                        {
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>No logs found.</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="d-flex flex-column flex-md-row justify-content-between align-items-center gap-3">
    <nav aria-label="Logs Filter" class="btn-group">
        <button class="btn btn-outline-primary @(string.IsNullOrEmpty(logsActionFilter) ? "active" : "")" @onclick="@(() => GoToPage(1, null))">Show All</button>
        <button class="btn btn-outline-primary @(logsActionFilter == "View" ? "active" : "")" @onclick="@(() => GoToPage(1, "View"))">View</button>
        <button class="btn btn-outline-primary @(logsActionFilter == "Add" ? "active" : "")" @onclick="@(() => GoToPage(1, "Add"))">Add</button>
        <button class="btn btn-outline-primary @(logsActionFilter == "Edit" ? "active" : "")" @onclick="@(() => GoToPage(1, "Edit"))">Edit</button>
        <button class="btn btn-outline-primary @(logsActionFilter == "Delete" ? "active" : "")" @onclick="@(() => GoToPage(1, "Delete"))">Delete</button>
    </nav>

    @if (paginatedLogs?.Pagination != null && paginatedLogs.Pagination.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination mb-0 flex-wrap justify-content-center">
                <li class="page-item @(paginatedLogs.Pagination.CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="@(() => GoToPage(paginatedLogs.Pagination.CurrentPage - 1, logsActionFilter))" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>

                @foreach (var pageNumber in GetPageNumbers(paginatedLogs.Pagination.CurrentPage, paginatedLogs.Pagination.TotalPages))
                {
                    @if (pageNumber == -1)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                    else
                    {
                        <li class="page-item @(pageNumber == paginatedLogs.Pagination.CurrentPage ? "active" : "")">
                            <button class="page-link" @onclick="@(() => GoToPage(pageNumber, logsActionFilter))">@pageNumber</button>
                        </li>
                    }
                }

                <li class="page-item @(paginatedLogs.Pagination.CurrentPage == paginatedLogs.Pagination.TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="@(() => GoToPage(paginatedLogs.Pagination.CurrentPage + 1, logsActionFilter))" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private PaginatedLogs? paginatedLogs;
    private string? logsActionFilter = null;
    private const int logsAmount = 10;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await Auth.CheckLoginStatusAsync();
        if (!Auth.IsLoggedIn)
        {
            NavManager.NavigateTo("/login", false);
            return; // exit to prevent loading page content
        }

        await GoToPage(1, logsActionFilter);
    }

    /// <summary>
    /// Fetches a list of paginated logs from the API and updates the component state.
    /// </summary>
    /// <param name="page">The page number to retrieve.</param>
    /// <param name="filter">The optional action filter to apply.</param>
    private async Task GoToPage(int page, string? filter)
    {
        if (isLoading) return;

        isLoading = true;
        paginatedLogs = null; // Clear logs to show loading state
        logsActionFilter = filter;

        try
        {
            var apiEndpoint = $"api/logs?logsActionFilter={filter}&page={page}&logsAmount={logsAmount}";
            paginatedLogs = await Http.GetFromJsonAsync<PaginatedLogs>(apiEndpoint);
        }
        catch (HttpRequestException ex)
        {
            Console.Error.WriteLine($"Error fetching logs: {ex.Message}");
            paginatedLogs = new(); // Reset to an empty state on error
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Generates a list of page numbers to display in the pagination control.
    /// </summary>
    /// <param name="currentPage">The current active page.</param>
    /// <param name="totalPages">The total number of available pages.</param>
    /// <returns>An IEnumerable of page numbers. -1 represents an ellipsis (...)</returns>
    private IEnumerable<int> GetPageNumbers(int currentPage, int totalPages)
    {
        const int maxPagesToShow = 5;
        var pages = new List<int>();

        if (totalPages <= maxPagesToShow)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            var startPage = Math.Max(1, currentPage - 2);
            var endPage = Math.Min(totalPages, currentPage + 2);

            if (startPage > 1)
            {
                pages.Add(1);
                if (startPage > 2) pages.Add(-1); // Ellipsis
            }

            for (int i = startPage; i <= endPage; i++)
            {
                pages.Add(i);
            }

            if (endPage < totalPages)
            {
                if (endPage < totalPages - 1) pages.Add(-1); // Ellipsis
                pages.Add(totalPages);
            }
        }

        return pages;
    }
}
